<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="deployment">
  <title>TorqueBox Application Deployment</title>

  <para>The TorqueBox Application Server is capable of serving many
  applications simultaneously. To add your application to the server, you must
  <emphasis>deploy</emphasis> it. To deploy an application, you tell TorqueBox
  where to find it. You can do so via our <command>rake</command> tasks, the 
  <command>torquebox</command> command, or manually.</para>

  <section id="rake-deployment">
    <title>Rake tasks</title>

    <para>TorqueBox provides a gem that includes Rake tasks which
    assist in the deployment to and undeployment from an instance of the
    TorqueBox Server in addition to other server management tasks. Please
    see <xref linkend="rake-support"/> for details.</para>
  </section>

  <section id="cmd-deployment">
    <title>The torquebox command</title>

    <para>In addition to the <command>rake</command> tasks, TorqueBox provides 
    an executable script that assists in the deployment to and undeployment from 
    an instance of the TorqueBox Server in addition to other server management tasks. 
    Please see <xref linkend="torquebox-cmd"/> for details.</para>
  </section>

  <section id="manual-deployment">
    <title>Manual deployment</title>

    <para>To customize some of the aspects of deployment, instead of using the
    Rake tasks or the torquebox command, you may manually deploy your artifacts. 
    This manual process is identical to the automation that the tasks and command
    provide.</para>

    <para>To deploy manually, you'll need to create two files in the deployment
    directory, which is by default <filename>$JBOSS_HOME/standalone/deployments/</filename>.
    The first file is either a small text file (called a <emphasis>deployment
    descriptor</emphasis>) or a <emphasis>TorqueBox archive</emphasis>, depending
    on whether you are deploying an application from where it sits on disk or as
    a self-contained archive. The second file you will need to create is a 
    <emphasis>deployment marker</emphasis>. TorqueBox uses various deployment 
    markers to manage the lifecycle of a deployment.</para>

    <section id="deployment-markers">
      <title>Deployment markers</title>

      <para>AS7 (and therefore TorqueBox) uses a set of files in the deployment
      directory called <emphasis>deployment markers</emphasis> to manage the deployment
      lifecycle of a deployment artifact. A deployment marker for a deployment artifact
      is an empty file with the same name as the artifact with the marker suffix appended.
      For manual deployment, you usually only need to be concerned with two of them:
      <filename>.dodeploy</filename> and <filename>.deployed</filename>.       
      There are quite a few other marker files, and you see the full list in
     <ulink url="https://docs.jboss.org/author/display/AS71/Application+deployment#Applicationdeployment-MarkerFiles">the AS7 docs</ulink>.

      <itemizedlist>
        <listitem><filename>.dodeploy</filename> - signifies that the artifact should be 
        deployed. You would create this file to trigger deployment. TorqueBox removes
        this marker file after completing the deployment.</listitem>
        <listitem><filename>.deployed</filename> - signifies that the artifact has been 
        deployed. TorqueBox creates this file after completing the deployment.</listitem>
      </itemizedlist>
</para>

      <para>To trigger redeployment of an already deployed application, simply update the
      timestamp on its <filename>.deployed</filename> marker file. To undeploy an application,
      remove the <filename>.deployed</filename> marker file. Example:</para>

      <para><informalexample><screen># redeploy
<prompt>$</prompt> <command>touch</command> <filename>$JBOSS_HOME/standalone/deployments/my-app-knob.yml.deployed</filename>
# undeploy
<prompt>$</prompt> <command>rm</command> <filename>$JBOSS_HOME/standalone/deployments/my-app-knob.yml.deployed</filename>
</screen></informalexample></para>
    </section>

    <section id="deployment-via-descriptor">
      <title>Manually deploying with a descriptor</title>
      <para>Applications may be deployed from where they sit on disk. To do so manually,
      you need to write a deployment descriptor that references the application directory
      from its <varname>root</varname> entry to 
      <filename>$JBOSS_HOME/standalone/deployments/</filename>. The descriptor is a 
      <ulink url="http://yaml.org/">YAML</ulink> file with a required
      suffix of <filename>-knob.yml</filename>.
      For details on the various options for authoring deployment
      descriptors, see <xref linkend="deployment-descriptors" />. For TorqueBox to
      notice your deployment, you'll also need to create an empty 
      <filename>.dodeploy</filename> marker. Example:
      </para>

      <para><informalexample><screen><prompt>$</prompt> <command>echo</command> <command>"application:\n  root: /path/to/my-app/" ></command> <filename>$JBOSS_HOME/standalone/deployments/my-app-knob.yml</filename>
<prompt>$</prompt> <command>touch</command> <filename>$JBOSS_HOME/standalone/deployments/my-app-knob.yml.dodeploy</filename></screen></informalexample></para>
    </section>

    <section id="deployment-via-archive">
      <title>Manually deploying an archive</title>

      <para>Ruby web applications may be deployed as atomic
      <emphasis>self-contained archives</emphasis>. An archive is simply a
      packaging of the application's directory. The TorqueBox server deploys
      bundles created with the Java <command>jar</command> tool. The Rake tasks 
      and the torquebox command both provide support for the creation and deployment 
      of archives. Please see <xref linkend="torquebox-cmd-archive"/> or
      <xref linkend="rake-archive"/> for more details.</para>

      <para>To manually deploy an archive file, copy it to 
      <filename>$JBOSS_HOME/standalone/deployments/</filename> and create an
      empty <filename>app-name.knob.dodeploy</filename> marker file in
      <filename>$JBOSS_HOME/standalone/deployments/</filename>. Example:</para>

      <para><informalexample><screen><prompt>$</prompt> <command>cp</command> <filename>something.knob</filename> <filename>$JBOSS_HOME/standalone/deployments/</filename>
<prompt>$</prompt> <command>touch</command> <filename>$JBOSS_HOME/standalone/deployments/something.knob.dodeploy</filename></screen></informalexample></para>

    <section><title>Deploying an archive with a deployment descriptor</title>
    <para>If you don't want to place your TorqueBox archive in the deployment directory, or
    need to override some of the configuration options set in the archive, you can instead deploy
    a deployment descriptor that points to the archive file. Follow the steps described in
    <xref linkend="deployment-via-descriptor"/>, but use the path to the archive 
    <filename>.knob</filename> as the <varname>root</varname> instead of the path to
    the application directory.</para></section>
    </section>
  </section>

  <section id="zero-downtime-redeployment">
    <title>Zero Downtime Redeployment</title>

    <para>TorqueBox now supports redeploying part or all of an
    application without any downtime. For now, this only works with
    regular exploded deployments (not archives). To initiate a zero
    downtime deployment, copy the updated application code to the
    server (overwriting the currently running files) and touch
    <filename>$APP_ROOT/tmp/restart.txt</filename>, where
    <filename>$APP_ROOT</filename> is the root directory of your
    application. Please be aware that Torquebox will need permissions 
    to read and delete from the <filename>$APP_ROOT/tmp</filename> directory
    as the restart.txt file will get deleted once Torquebox detects one of the 
    redeployment markers. The application's web runtime will restart, sending
    all new web requests to the updated runtime while existing
    requests finish in the old runtimes. Other runtimes may be
    restarted by touching the appropriate redeployment markers, listed
    below.</para>

    <table>
      <title>Zero Downtime Redeployment Markers</title>
        <tgroup cols="2">
          <colspec align="left" />
          <thead>
            <row>
              <entry>Marker File</entry>
              <entry>Runtimes Restarted</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>tmp/restart.txt</varname></entry>
              <entry>web</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-web.txt</varname></entry>
              <entry>web</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-jobs.txt</varname></entry>
              <entry>jobs</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-messaging.txt</varname></entry>
              <entry>messaging</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-services.txt</varname></entry>
              <entry>services</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-stomplets.txt</varname></entry>
              <entry>stomplets</entry>
            </row>
            <row>
              <entry><varname>tmp/restart-all.txt</varname></entry>
              <entry>web, jobs, messaging, services, stomplets</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If you don't want to use fileystem markers, runtime pools
      can also be restarted by JMX operations. Expand the MBean tree
      under torquebox.pools -&gt; &lt;app_name&gt; to see all
      the runtime pools for each application. Each pool has a restart
      operation that behaves identically as touching that pool's
      restart marker.</para>

      <note>
        <title>TorqueBox Services and Runtime Restarts</title>
        <para>Note that when the services runtime gets restarted any
        running services will be stopped and new service instances
        initialized and started.</para>
      </note>
  </section>
</chapter>
