<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="production-setup">
  <title>TorqueBox Production Tips</title>

  <section id="production-clustering">
    <title>Clustering</title>

    <section>
      <title>Enabling Clustering</title>

      <screen><prompt>$</prompt> <command>torquebox run --clustered</command></screen>

      <para>If you're starting JBoss AS7 directly via standalone.sh,
      you'll need to pass the server-config option to enable
      clustering.</para>

      <screen><prompt>$</prompt> <command>$JBOSS_HOME/bin/standalone.sh --server-config=standalone-ha.xml</command></screen>

      <para>The --clustered option to torquebox run just chooses the
      standalone-ha.xml configuration for you under the covers. So, if
      you need to edit any of the underlying AS7 configuration the
      file's location is
      <filename>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</filename>.</para>

      <para>In either case, you'll know TorqueBox is running in clustered mode when you see something like the output below in the console upon startup.</para>

      <screen>10:38:17,118 INFO  [stdout] (ServerService Thread Pool -- 86)
10:38:17,118 INFO  [stdout] (ServerService Thread Pool -- 86) ------------------------------------------------------------------
10:38:17,118 INFO  [stdout] (ServerService Thread Pool -- 86) GMS: address=node2/web, cluster=web, physical address=192.168.1.163:55300
10:38:17,119 INFO  [stdout] (ServerService Thread Pool -- 86) -------------------------------------------------------------------</screen>

      <para>When additional nodes are started and become connected to the other nodes, you will seem something like the following in the console of both nodes:</para>

      <screen>10:38:17,226 INFO  [org.infinispan.remoting.transport.jgroups.JGroupsTransport] (Incoming-1,null) ISPN000094: Received new cluster view: [node1/web|1] [node1/web, node2/web]
10:38:18,362 INFO  [org.hornetq.core.server.cluster.impl.BridgeImpl] (Thread-7 (HornetQ-server-HornetQServerImpl::serverUUID=e40c150a-7d0d-11e2-81a7-c54946823213-1095366819)) Bridge ClusterConnectionBridge@2d9efd57 [name=sf.my-cluster.41849c5b-7d0e-11e2-b6fc-f37690770a10, queue=QueueImpl[name=sf.my-cluster.41849c5b-7d0e-11e2-b6fc-f37690770a10, postOffice=PostOfficeImpl [server=HornetQServerImpl::serverUUID=e40c150a-7d0d-11e2-81a7-c54946823213]]@210a7227 targetConnector=ServerLocatorImpl (identity=(Cluster-connection-bridge::ClusterConnectionBridge@2d9efd57 [name=sf.my-cluster.41849c5b-7d0e-11e2-b6fc-f37690770a10, queue=QueueImpl[name=sf.my-cluster.41849c5b-7d0e-11e2-b6fc-f37690770a10, postOffice=PostOfficeImpl [server=HornetQServerImpl::serverUUID=e40c150a-7d0d-11e2-81a7-c54946823213]]@210a7227 targetConnector=ServerLocatorImpl [initialConnectors=[org-hornetq-core-remoting-impl-netty-NettyConnectorFactory?port=5545&amp;host=192-168-1-163], discoveryGroupConfiguration=null]]::ClusterConnectionImpl@1368605238 [nodeUUID=e40c150a-7d0d-11e2-81a7-c54946823213, connector=org-hornetq-core-remoting-impl-netty-NettyConnectorFactory?port=5445&amp;host=192-168-1-163, address=jms, server=HornetQServerImpl::serverUUID=e40c150a-7d0d-11e2-81a7-c54946823213])) [initialConnectors=[org-hornetq-core-remoting-impl-netty-NettyConnectorFactory?port=5545&amp;host=192-168-1-163], discoveryGroupConfiguration=null]] is connected</screen>

      <para>This indicates that the two nodes have successfully connected as part of the cluster.</para>

    </section>

    <section>
      <title>Multicast Out of the Box</title>

      <para>Clustering is designed to use multicast out of the box. If
      you're on a network that can't use multicast, see <xref
      linkend="clustering-without-multicast"/></para>
    </section>

    <section>
      <title>Don't Bind to 0.0.0.0</title>

      <para>JGroups, the underlying library used for most of TorqueBox
      clustering, doesn't support clustering if bound to 0.0.0.0. Make
      sure you bind TorqueBox to a real IP address that's accessible
      from other nodes in the cluster.</para>
    </section>
  </section>

  <section id="clustering-without-multicast">
    <title>Clustering TorqueBox Without Multicast</title>

    <para>By default when you start TorqueBox in clustered mode other members
    of the cluster are discovered using multicast. Sometimes this isn't the
    desired behavior, either because the environment doesn't support multicast
    or the administrator wants direct control over the members of a cluster.
    In these cases, it's possible to configure TorqueBox to use a predefined
    set of cluster members.</para>

    <para>Under the hood TorqueBox uses a library called JGroups to
    handle the cluster discovery and transports. An example of
    configuring TorqueBox services to cluster without multicast is
    below.</para>

      <para><example>
          <title>JGroups Configuration
          (<filename>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</filename>)</title>

          <para><programlisting>&lt;server xmlns="urn:jboss:domain:1.4"&gt;
  &lt;profile&gt;
    ...
    &lt;subsystem xmlns="urn:jboss:domain:jgroups:1.1" default-stack="tcp"&gt;
      &lt;stack name="tcp"&gt;
        &lt;transport type="TCP" socket-binding="jgroups-tcp"&gt;
          &lt;property name="max_bundle_size"&gt;32k&lt;/property&gt;
        &lt;/transport&gt;
        &lt;protocol type="TCPPING"&gt;
          &lt;property name="initial_hosts"&gt;
            10.100.10.2[7600],10.100.10.3[7600]
          &lt;/property&gt;
        &lt;/protocol&gt;
        &lt;protocol type="MERGE3"/&gt;
        &lt;protocol type="FD_SOCK" socket-binding="jgroups-tcp-fd"/&gt;
        &lt;protocol type="FD"/&gt;
        &lt;protocol type="VERIFY_SUSPECT"/&gt;
        &lt;protocol type="pbcast.NAKACK2"/&gt;
        &lt;protocol type="UNICAST2"/&gt;
        &lt;protocol type="pbcast.STABLE"/&gt;
        &lt;protocol type="pbcast.GMS"/&gt;
        &lt;protocol type="UFC"/&gt;
        &lt;protocol type="MFC"/&gt;
        &lt;protocol type="FRAG2"&gt;
          &lt;property name="frag_size"&gt;30k&lt;/property&gt;
        &lt;/protocol&gt;
        &lt;protocol type="RSVP"/&gt;
      &lt;/stack&gt;
    &lt;/subsystem&gt;
    ...
  &lt;/profile&gt;
  &lt;socket-binding-group name="standard-sockets" default-interface="public" port-offset="${jboss.socket.binding.port-offset:0}"&gt;
    ...
    &lt;socket-binding name="jgroups-tcp" port="7600"/&gt;
    &lt;socket-binding name="jgroups-tcp-fd" port="57600"/&gt;
    ...
  &lt;/socket-binding-group&gt;
&lt;/server&gt;</programlisting>
          </para>
        </example>

        <note>
          <title>Important Changes</title>

          <para>The most important changes here are a) replacement of
          the MPING protocol with the TCPPING protocol with its
          initial_hosts property and b) the default-stack="tcp"
          attribute and value added to the &lt;subsystem&gt;. Be sure
          to replace the initial_hosts IP addresses with the correct
          values for your environment and change the ports from 7600
          if you've changed the jgroups-tcp socket binding to a
          different port on those hosts.</para>
        </note>
      </para>

      <section id="clustering-on-amazon">
        <title>Clustering On Amazon EC2</title>
        <para>
          A gossip router is the typical solution when dynamic peer
          discovery is desired in a non-multicast environment. Another
          option, if on Amazon EC2, is the <ulink
          url="http://www.jgroups.org/javadoc/org/jgroups/protocols/S3_PING.html">S3_PING</ulink>
          JGroups protocol.
        </para>

        <para>
          Enabling clustering with dynamic discovery on EC2 amounts to
          replacing the <code>MPING</code> protocol element of the
          "tcp" stack configured in
          <code>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</code>
          with <code>S3_PING</code>. And be sure to change the
          <code>default-stack</code> attribute of the
          <code>subsystem</code> to "tcp".
        </para>

        <para><example>
          <title>JGroups Configuration
          (<filename>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</filename>)</title>

          <para><programlisting>...
&lt;subsystem xmlns="urn:jboss:domain:jgroups:1.1" default-stack="tcp"&gt;
  &lt;stack name="tcp"&gt;
    &lt;transport type="TCP" socket-binding="jgroups-tcp"&gt;
      &lt;property name="max_bundle_size"&gt;32k&lt;/property&gt;
    &lt;/transport&gt;
  
    &lt;protocol type="S3_PING"&gt;
      &lt;property name="secret_access_key"&gt;YOUR_SECRET_ACCESS_KEY&lt;/property&gt;
      &lt;property name="access_key"&gt;YOUR_ACCESS_KEY&lt;/property&gt;
      &lt;property name="location"&gt;SOME_BUCKET_PATH&lt;/property&gt;
    &lt;/protocol&gt;
  
    &lt;protocol type="MERGE3"/&gt;
    &lt;protocol type="FD_SOCK" socket-binding="jgroups-tcp-fd"/&gt;
    ...
  &lt;/stack&gt;
&lt;/subsystem&gt;</programlisting>
          </para>
        </example></para>
      </section>

      <section id="clustering-hornetq">
        <title>HornetQ Configuration</title>
        <para>
          Without multicast, you must change the HornetQ config to use
          the JGroups "tcp" stack instead of the default "udp" stack.
        </para>

        <para>
          Search for <code>jgroups-stack</code> in
          <code>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</code>,
          and you'll see this beneath both the <code>broadcast-group</code> and
          <code>discovery-group</code> elements:
        </para>

        <screen>&lt;jgroups-stack&gt;${msg.jgroups.stack:udp}&lt;/jgroups-stack&gt;</screen>

        <para>
          This <code>${property:default}</code> syntax refers to a
          Java system property called <code>msg.jgroups.stack</code>.
          If unset, the value following the colon is used, so you must
          either set this system property to "tcp" on the command
          line, e.g. <code>-Dmsg.jgroups.stack=tcp</code>, or replace
          "udp" with "tcp" in the config file for both the
          <code>broadcast-group</code> and
          <code>discovery-group</code> elements.
        </para>
      </section>

    </section>

  <section id="number-http-threads">
    <title>Sizing Number of HTTP Threads to Connection Pool</title>

    <para>When running under load in production and against a database, you'll
    want to size the number of HTTP threads concurrently processing web
    requests based on the number of connections available in your database
    connection pool so you don't have too many requests waiting to grab a
    connection from the pool and timing out. The specific ratio of HTTP
    threads to database connection pool size will depend on your application,
    but a good starting point is 1 to 1.</para>

    <section>
      <title>Setting Database Connection Pool Size</title>

      <para><example>
          <title>Database Connection Pool
          (<filename>config/database.yml</filename>)</title>

          <para><programlisting>production:
  adapter: mysql
  database: my_database
  host: my_host
  username: my_username
  password: my_password
  encoding: utf8
  pool: 100</programlisting>This example sets the database connection pool
          size to 100.</para>
        </example></para>
    </section>

    <section>
      <title>Setting Max Number of HTTP Threads</title>

      <para>If using the <code>torquebox-server</code> gem, you can pass the
      <parameter>--max-threads</parameter> parameter to set the maximum number
      of HTTP threads. <screen><prompt>$</prompt> <command>torquebox-server run --max-threads=25</command></screen></para>

      <para>If not using the <code>torquebox-server</code> gem, you can
      control the maximum number of HTTP threads by setting a system
      property.</para>

      <table>
        <title>Number of HTTP Threads System Property</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>System Property</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><parameter>org.torquebox.web.http.maxThreads</parameter></entry>

              <entry>The maximum number of threads to use for the default HTTP
              connector. If you've changed the connector's name from
              <emphasis>http</emphasis> in <filename>standalone.xml</filename>
              then substitute <emphasis>http</emphasis> for the new connector
              name in the property key. The default value is inherited from
              AS7 and is 512 * the number of CPUs.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><example>
          <title>Number of HTTP Threads
          (<filename>$JBOSS_HOME/standalone/configuration/standalone.xml</filename>)</title>

          <para><programlisting>&lt;extensions&gt;
  ...
&lt;/extensions&gt;
&lt;system-properties&gt;
  &lt;property name='org.torquebox.web.http.maxThreads' value='100'/&gt;
&lt;/system-properties&gt;
      </programlisting>This example sets the maximum of HTTP threads to
          100.</para>
        </example></para>
    </section>
  </section>

  <section id="ssl-configuration">
    <title>SSL Configuration</title>

    <section id="ssl-apache">
      <title>SSL Termination at Load Balancer</title>

      <para>If you choose to terminate SSL at the load balancer,
      you'll want to set the request header X_FORWARDED_PROTO to
      'https' before forwarding the request to TorqueBox. Rails will
      pick up on this header automatically but other web frameworks
      may require you to check this header manually to determine if a
      request came in over HTTP or HTTPS.</para>

      <para>To set this header under Apache, add the following line to
      the HTTPS VirtualHost configuration:

      <screen>set X_FORWARDED_PROTO 'https'</screen></para>
    </section>

    <section id="ssl-torquebox">
      <title>SSL Termination at TorqueBox</title>

      <para>Another option is to terminate SSL connections at
      TorqueBox. This requires editing the appropriate configuration
      file -
      <filename>$JBOSS_HOME/standalone/configuration/standalone.xml</filename>
      when not running in a cluster or
      <filename>$JBOSS_HOME/standalone/configuration/standalone-ha.xml</filename>
      when running in a cluster.</para>

      <para><example>
        <title>SSL Configuration in standalone.xml</title>

        <para><programlisting>&lt;subsystem xmlns="urn:jboss:domain:web:1.4" native="false" default-virtual-server="default-host"&rt;
  &lt;connector name="http" protocol="HTTP/1.1" scheme="http" socket-binding="http"/&rt;
  &lt;connector name="https" protocol="HTTP/1.1" scheme="https" socket-binding="https" secure="true"&rt;
    &lt;ssl name="https" key-alias="myalias" password="foobar" certificate-key-file="/tmp/keystore"/&rt;
  &lt;/connector&rt;
  &lt;virtual-server name="default-host"&rt;
    &lt;alias name="localhost"/&rt;
    &lt;alias name="example.com"/&rt;
  &lt;/virtual-server&rt;
&lt;/subsystem&rt;
        </programlisting>This is an example of the entire JBoss Web subsystem after
        being configured to terminate SSL.</para>
      </example></para>
    </section>
  </section>
  <section id="jvm-tuning">
    <title>JVM Tuning</title>

    <section id="jvm-codecache">
      <title>CodeCache</title>

      <para>In a production system it's very important to not let the
      JVM CodeCache get full. The CodeCache is an area of memory where
      the bytecode from all JITted methods gets stored. If it fills
      up, methods will no longer be JITted and things will run slower
      than they could. The default CodeCache size varies by JVM and
      platform, but for most servers it's only 48MB.</para>

      <para>When you run out of CodeCache space, a warning will be
      logged in the TorqueBox <filename>server.log</filename> that
      looks like this:

      <screen>Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full. Compiler has been disabled</screen>

      To increase the CodeCache size, you'll want to set the JVM
      property <code>-XX:ReservedCodeCacheSize=256m</code>, replacing
      the 256m with the desired size of your CodeCache. See <xref
      linkend="setting-jvm-properties"/> for details on how to
      set this JVM property.</para>
    </section>
  </section>
</chapter>
