<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
  <chapter id="first-steps">
    <title>First Steps</title>

    <para>
      Choose the section below to follow based on your development
      environment - Windows users should follow <xref
      linkend="first-steps-windows"/>, RVM users should follow <xref
      linkend="first-steps-rvm"/>, and regular Mac or Linux users
      should follow <xref linkend="first-steps-mac-linux"/>.
    </para>

    <para>
      If you need the full TorqueBox distribution for JavaEE
      applications, follow the <xref
      linkend="first-steps-full-distro"/>. The instructions are
      written with Linux in mind and will need to be modified slightly
      for usage on Windows.
    </para>

    <section id="first-steps-mac-linux">
      <title>First Steps on Mac / Linux</title>

      <para>
        If you use Ruby Version Manager (RVM), be sure to follow the
        <xref linkend="first-steps-rvm"/> instructions and not the
        generic Mac / Linux instructions.
       </para>

       <section>
        <title>Your First Rails Application</title>

        <para>
          Ensure you have Java 6 or above installed then download and
          extract the TorqueBox binary distribution and set a few
          environment variables.

           <screen><prompt>$</prompt> <command>wget http://torquebox.org/release/org/torquebox/torquebox-dist/${project.version}/torquebox-dist-${project.version}-bin.zip</command>
<prompt>$</prompt> <command>unzip torquebox-dist-${project.version}-bin.zip -d ~ </command>
<prompt>$</prompt> <command>export TORQUEBOX_HOME=~/torquebox-${project.version}</command>
<prompt>$</prompt> <command>export JBOSS_HOME=$TORQUEBOX_HOME/jboss</command>
<prompt>$</prompt> <command>export JRUBY_HOME=$TORQUEBOX_HOME/jruby</command>
<prompt>$</prompt> <command>export PATH=$JRUBY_HOME/bin:$PATH</command></screen>

          You'll likely want to place the exports somewhere that gets
          loaded automatically - <filename>~/.bashrc</filename>,
          <filename>~/.bash_profile</filename>, or wherever your
          operating system suggests placing user-specific environment
          variables.
        </para>

        <para>
          Install Rails and create a new Rails example application.

          <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>gem install rails</command>
...
Successfully installed rails-4.0.4
26 gems installed
<prompt>$</prompt> <command>rails new .</command>
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.</screen>
        </para>

        <para>
          Add a simple scaffolded resource, deploy it to TorqueBox,
          and run TorqueBox.

          <screen><prompt>$</prompt> <command>rails g scaffold post title body:text</command>
...
      create      app/assets/stylesheets/posts.css.scss
      invoke  scss
      create      app/assets/stylesheets/scaffolds.css.scss
<prompt>$</prompt> <command>rake db:migrate</command>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0060s
   -> 0 rows
==  CreatePosts: migrated (0.0080s) ===========================================

<prompt>$</prompt> <command>torquebox deploy</command>
Deployed: rails_example-knob.yml
    into: /Users/someone/torquebox-${project.version}/jboss/standalone/deployments
<prompt>$</prompt> <command>torquebox run </command>
...
15:59:28,053 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 2) JBAS018559: Deployed "rails_example-knob.yml"</screen>
        </para>

        <para>
          Open <ulink url="http://localhost:8080"/> in your browser
          and you'll be greeted with the Rails "Welcome aboard"
          page. Navigate to <ulink
          url="http://localhost:8080/posts/"/> to see your scaffolded
          resource.
        </para>

        <para>
          Now edit
          <filename>~/torquebox_examples/rails_example/app/views/posts/index.html.erb</filename>
          then refresh the posts page in your browser and see your
          changes. Changes to your Rails application show up
          immediately in the browser, as expected. When you're done,
          press CTRL+C in the terminal to stop TorqueBox before
          continuing with the next steps.
        </para>
      </section>

      <section>
        <title>Subsequent Applications</title>

        <para>
          Deploying multiple applications to TorqueBox is
          straightforward, but let's walk through the required steps.
          We'll create a Rack application to go with our Rails example
          application created earlier. If TorqueBox is still running
          stop it with CTRL+C in its terminal window before following
          the steps below.

      <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>gem install rack</command>
Fetching: rack-1.5.2.gem (100%)
Successfully installed rack-1.5.2
1 gem installed
</screen>

          Now create a <filename>config.ru</filename> for our example
          rack application.
          <example>
            <title><filename>~/torquebox_examples/rack_example/config.ru</filename></title>
            <programlisting>app = lambda { |env|
  [200, { 'Content-Type' => 'text/html' }, "Hello from Rack\n" ]
}
run app</programlisting>
          </example>

          Deploy the Rack application at a context-path of "/rack"
          since we already have the Rails application deployed at the
          root context.

        <screen><prompt>$</prompt> <command>torquebox deploy --context-path=/rack</command>
Deployed: rack_example-knob.yml
    into: /Users/someone/torquebox-${project.version}/jboss/standalone/deployments</screen>
        </para>

        <para>
          Now you should be able to run TorqueBox and see both
          applications deployed.

        <screen><prompt>$</prompt> <command>torquebox run</command>
...
19:25:38,049 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rails_example-knob.yml"
19:25:38,050 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rack_example-knob.yml"</screen>

          Visit <ulink url="http://localhost:8080"/> and <ulink
          url="http://localhost:8080/rack/"/> to see that both your
          Rails and Rack applications are deployed and working.
        </para>

        <para>
          Congratulations! You now know all the basics to proceed with
          the rest of this getting started guide when using a Mac or
          Linux.
        </para>

        <para>Continue to <xref linkend="adding-torquebox-features"/>.</para>
      </section>
     </section>

    <section id="first-steps-windows">
      <title>First Steps on Windows</title>

      <section>
        <title>Your First Rails Application</title>

        <para>
          Ensure you have Java 6 or above installed then download
          TorqueBox using your web browser from <ulink
          url="http://torquebox.org/release/org/torquebox/torquebox-dist/${project.version}/torquebox-dist-${project.version}-bin.zip"/>. Right-click
          the downloaded zip in Windows Explorer and select Extract
          All. When prompted for a folder to extract the files to,
          choose your user's home directory (ie
          <filename>C:\Users\someone\</filename>).
        </para>

        <para>
          After TorqueBox is extracted, we need to set a few
          environment variables. Find the Advanced System Settings
          dialog (in Windows 7 this is Control Panel -> System and
          Security -> System -> Advanced System Settings) and click
          the Environment Variables button. We want to add three new
          user environment variables. Add
          <varname>TORQUEBOX_HOME</varname> with a value of
          <filename>%HOME%\torquebox-${project.version}</filename>. Add
          <varname>JBOSS_HOME</varname> with a value of
          <filename>%HOME%\torquebox-${project.version}\jboss</filename>. Add
          <varname>JRUBY_HOME</varname> with a value of
          <filename>%HOME%\torquebox-${project.version}\jruby</filename>. Also modify the
          <varname>Path</varname> environment variable by prepending
          <filename>%JRUBY_HOME%\bin;</filename> to the front of the
          current value. Click the OK button to save and close the
          Environment Variables dialog.
        </para>

        <para>
          Now let's open up a Command Prompt to install Rails and
          create a new Rails example application. You can open a
          Command Prompt by clicking the Windows button in the bottom
          left and typing <filename>cmd</filename> in the search box.

          <screen><prompt>&gt;</prompt> <command>mkdir %HOME%\torquebox_examples\rails_example</command>
<prompt>&gt;</prompt> <command>cd %HOME%\torquebox_examples\rails_example</command>
<prompt>&gt;</prompt> <command>gem install rails</command>
...
Successfully installed rails-4.0.4
26 gems installed
<prompt>&gt;</prompt> <command>rails new .</command>
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.</screen>
        </para>

        <para>
          Add a simple scaffolded resource, deploy it to TorqueBox,
          and run TorqueBox.

          <screen><prompt>&gt;</prompt> <command>rails g scaffold post title body:text</command>
...
      create      app/assets/stylesheets/posts.css.scss
      invoke  scss
      create      app/assets/stylesheets/scaffolds.css.scss
<prompt>&gt;</prompt> <command>rake db:migrate</command>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0060s
   -> 0 rows
==  CreatePosts: migrated (0.0080s) ===========================================

<prompt>&gt;</prompt> <command>torquebox deploy</command>
Deployed: rails_example-knob.yml
    into: C:\Users\someone\torquebox-${project.version}\jboss\standalone\deployments
<prompt>&gt;</prompt> <command>echo Y | jruby -S torquebox run </command>
...
15:59:28,053 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 2) JBAS018559: Deployed "rails_example-knob.yml"</screen>
          <tip>
            <title>Why <command>echo Y</command> and <command>jruby -S</command>?</title>
            <para>
              When stopping TorqueBox via CTRL+C, the Windows Command
              Prompt will ask you if you want to "Terminate batch job
              (Y/N)?". Piping <command>echo Y</command> into the
              command just prevents you from having to answer this
              prompt.

              We prefix the command with <command>jruby -S</command>
              because if we just used <command>echo Y | torquebox
              run</command> there's currently a bug where TorqueBox
              would get stuck in an infinite restart loop upon
              stopping.
            </para>
          </tip>
        </para>

        <para>
          Open <ulink url="http://localhost:8080"/> in your browser
          and you'll be greeted with the Rails "Welcome aboard"
          page. Navigate to <ulink
          url="http://localhost:8080/posts/"/> to see your scaffolded
          resource.
        </para>

        <para>
          Now edit
          <filename>%HOME%\torquebox_examples\rails_example\app\views\posts\index.html.erb</filename>
          then refresh the posts page in your browser and see your
          changes. Changes to your Rails application show up
          immediately in the browser, as expected. When you're done,
          press CTRL+C in the terminal to stop TorqueBox before
          continuing with the next steps.
        </para>
      </section>

      <section>
        <title>Subsequent Applications</title>

        <para>
          Deploying multiple applications to TorqueBox is
          straightforward, but let's walk through the required steps.
          We'll create a Rack application to go with our Rails example
          application created earlier. If TorqueBox is still running
          stop it with CTRL+C in its terminal window before following
          the steps below.

      <screen><prompt>&gt;</prompt> <command>mkdir %HOME%\torquebox_examples\rack_example</command>
<prompt>&gt;</prompt> <command>cd %HOME%\torquebox_examples\rack_example</command>
<prompt>&gt;</prompt> <command>gem install rack</command>
Fetching: rack-1.5.2.gem (100%)
Successfully installed rack-1.5.2
1 gem installed
</screen>

          Now create a <filename>config.ru</filename> for our example
          rack application.
          <example>
            <title><filename>%HOME%\torquebox_examples\rack_example\config.ru</filename></title>
            <programlisting>app = lambda { |env|
  [200, { 'Content-Type' => 'text/html' }, "Hello from Rack\n" ]
}
run app</programlisting>
          </example>

          Deploy the Rack application at a context-path of "/rack"
          since we already have the Rails application deployed at the
          root context.

        <screen><prompt>&gt;</prompt> <command>torquebox deploy --context-path=/rack</command>
Deployed: rack_example-knob.yml
    into: C:\Users\someone\torquebox-${project.version}\jboss\standalone\deployments</screen>
        </para>

        <para>
          Now you should be able to run TorqueBox and see both
          applications deployed.

        <screen><prompt>&gt;</prompt> <command>echo Y | jruby -S torquebox run</command>
...
19:25:38,049 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rails_example-knob.yml"
19:25:38,050 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rack_example-knob.yml"</screen>

          Visit <ulink url="http://localhost:8080"/> and <ulink
          url="http://localhost:8080/rack/"/> to see that both your
          Rails and Rack applications are deployed and working.
        </para>

        <para>
          Congratulations! You now know all the basics to proceed with
          the rest of this getting started guide when using
          Windows. The filesystem paths and command prompts shown in
          future chapters won't be Windows-specific, so be sure to
          translate any paths to the appropriate format before
          executing the example commands.
        </para>

        <para>Continue to <xref linkend="adding-torquebox-features"/>.</para>

      </section>

    </section>

    <section id="first-steps-rvm">
      <title>First Steps with RVM</title>

      <section>
        <title>Your First Rails Application</title>

        <para>
          Ensure you have a recent JRuby installed then install the
          <varname>torquebox-server</varname> gem into the global
          gemset.

        <screen><prompt>$</prompt> <command>rvm install jruby-${version.jruby}</command>
<prompt>$</prompt> <command>rvm use jruby-${version.jruby}@global</command>
<prompt>$</prompt> <command>gem install torquebox-server -v ${project.version}</command></screen>
        </para>

        <para>
          Create a directory and project-specific gemset for our
          example application.

        <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>rvm --rvmrc --create jruby-${version.jruby}@tb_rails_example</command></screen>
        </para>

        <para>
          Change to the Rails example directory, trust the generated
          .rvmrc file when prompted, and install Rails.

        <screen><prompt>$</prompt> <command>cd ~/torquebox_examples/rails_example</command>
====================================================================================
= NOTICE                                                                           =
====================================================================================
= RVM has encountered a new or modified .rvmrc file in the current directory       =
= This is a shell script and therefore may contain any shell commands.             =
=                                                                                  =
= Examine the contents of this file carefully to be sure the contents are          =
= safe before trusting it! ( Choose v[iew] below to view the contents )            =
====================================================================================
Do you wish to trust this .rvmrc file? (/Users/someone/torquebox_examples/rails_example/.rvmrc)
y[es], n[o], v[iew], c[ancel]> y
<prompt>$</prompt> <command>rvm gemset list</command>

gemsets for jruby-${version.jruby} (found in /Users/someone/.rvm/gems/jruby-${version.jruby})
   global
=> tb_rails_example

<prompt>$</prompt> <command>gem install rails</command>
...
Successfully installed rails-4.0.4
26 gems installed
...</screen>
        </para>

        <para>
          Create a new Rails application, add a simple scaffolded
          resource, deploy it to TorqueBox, and run TorqueBox.

        <screen><prompt>$</prompt> <command>rails new .</command>
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
<prompt>$</prompt> <command>rails g scaffold post title body:text</command>
...
      create      app/assets/stylesheets/posts.css.scss
      invoke  scss
      create      app/assets/stylesheets/scaffolds.css.scss
<prompt>$</prompt> <command>rake db:migrate</command>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0060s
   -> 0 rows
==  CreatePosts: migrated (0.0080s) ===========================================

<prompt>$</prompt> <command>torquebox deploy</command>
Deployed: rails_example-knob.yml
    into: /Users/someone/.rvm/gems/jruby-${version.jruby}@global/gems/torquebox-server-${project.version}-java/jboss/standalone/deployments
<prompt>$</prompt> <command>torquebox run </command>
...
15:59:28,053 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 2) JBAS018559: Deployed "rails_example-knob.yml"</screen>
        </para>

        <para>
          Open <ulink url="http://localhost:8080"/> in your browser
          and you'll be greeted with the Rails "Welcome aboard"
          page. Navigate to <ulink
          url="http://localhost:8080/posts/"/> to see your scaffolded
          resource.
        </para>

        <para>
          Now edit
          <filename>~/torquebox_examples/rails_example/app/views/posts/index.html.erb</filename>
          then refresh the posts page in your browser and see your
          changes. Changes to your Rails application show up
          immediately in the browser, as expected. When you're done,
          press CTRL+C in the terminal to stop TorqueBox before
          continuing with the next steps.
        </para>

        <para>
          When you want to take advantage of TorqueBox-specific
          features, like we'll do in subsequent chapters, you'll need
          the <varname>torquebox</varname> gem in your application's
          Gemfile. However, since we're using
          <varname>torquebox-server</varname> under RVM to install
          TorqueBox, you'll want to ensure this gem is in the Gemfile
          for every application as well. If it's not you'll receive
          errors trying to use the <command>torquebox</command>
          command because bundler will be unable to find the
          <varname>torquebox-server</varname> gem.

          <example>
            <title><filename>~/torquebox_examples/rails_example/Gemfile</filename></title>
            <programlisting>source 'https://rubygems.org'

gem 'rails', '4.0.0'

gem 'activerecord-jdbcsqlite3-adapter', '1.3.0.beta2'
gem 'sass-rails', '~> 4.0.0'
gem 'uglifier', '>= 1.3.0'
gem 'coffee-rails', '~> 4.0.0'
gem 'therubyrhino'
gem 'jquery-rails'
gem 'turbolinks'
gem 'jbuilder', '~> 1.2'

group :doc do
  gem 'sdoc', require: false
end

gem 'torquebox', '~> ${project.version}'
gem 'torquebox-server', '~> ${project.version}'</programlisting>
          </example>
        </para>

      </section>

      <section>
        <title>Subsequent Applications</title>

        <para>
          Deploying multiple applications to TorqueBox when using RVM
          and project-specific gemsets requires a small amount of
          extra work. To walk through the required steps, let's create
          a second Rack application to go with our Rails example
          application created earlier. If TorqueBox is still running
          stop it with CTRL+C in its terminal window before following
          the steps below.

      <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>rvm --rvmrc --create jruby-${version.jruby}@tb_rack_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rack_example</command>
====================================================================================
= NOTICE                                                                           =
====================================================================================
= RVM has encountered a new or modified .rvmrc file in the current directory       =
= This is a shell script and therefore may contain any shell commands.             =
=                                                                                  =
= Examine the contents of this file carefully to be sure the contents are          =
= safe before trusting it! ( Choose v[iew] below to view the contents )            =
====================================================================================
Do you wish to trust this .rvmrc file? (/Users/someone/torquebox_examples/rack_example/.rvmrc)
y[es], n[o], v[iew], c[ancel]> y
<prompt>$</prompt> <command>rvm gemset list</command>

gemsets for jruby-${version.jruby} (found in /Users/someone/.rvm/gems/jruby-${version.jruby})
   global
=> tb_rack_example
   tb_rails_example

<prompt>$</prompt> <command>gem install rack</command>
Fetching: rack-1.5.2.gem (100%)
Successfully installed rack-1.5.2
1 gem installed
</screen>

          Now create a <filename>config.ru</filename> for our example
          rack application.
          <example>
            <title><filename>~/torquebox_examples/rack_example/config.ru</filename></title>
            <programlisting>app = lambda { |env|
  [200, { 'Content-Type' => 'text/html' }, "Hello from Rack\n" ]
}
run app</programlisting>
          </example>

          Deploy the Rack application at a context-path of "/rack"
          since we already have the Rails application deployed at the
          root context.

        <screen><prompt>$</prompt> <command>torquebox deploy --context-path=/rack</command>
Deployed: rack_example-knob.yml
    into: /Users/someone/.rvm/gems/jruby-${version.jruby}@global/gems/torquebox-server-${project.version}-java/jboss/standalone/deployments</screen>
        </para>

        <para>
          Now that two applications are deployed to TorqueBox, each
          with separate RVM gemsets, we hit an issue that trips up
          most users of RVM and TorqueBox. TorqueBox runs as a single
          process but RVM is really designed to have a separate
          process per project for gemsets to work out of the box. We
          can work around this by emulating the environment variables
          RVM sets when reading our <filename>.rvmrc</filename> in a
          <filename>torquebox.rb</filename> file for each application.

          <example>
            <title><filename>~/torquebox_examples/rack_example/torquebox.rb</filename></title>
            <programlisting>TorqueBox.configure do
  environment do
    GEM_HOME "#{ENV['rvm_path']}/gems/jruby-${version.jruby}@tb_rack_example"
    GEM_PATH "#{ENV['rvm_path']}/gems/jruby-${version.jruby}@tb_rack_example:#{ENV['rvm_path']}/gems/jruby-${version.jruby}@global"
  end
end</programlisting>
          </example>

          <example>
            <title><filename>~/torquebox_examples/rails_example/config/torquebox.rb</filename></title>
            <programlisting>TorqueBox.configure do
  environment do
    GEM_HOME "#{ENV['rvm_path']}/gems/jruby-${version.jruby}@tb_rails_example"
    GEM_PATH "#{ENV['rvm_path']}/gems/jruby-${version.jruby}@tb_rails_example:#{ENV['rvm_path']}/gems/jruby-${version.jruby}@global"
  end
end</programlisting>
          </example>

          Now you should be able to run TorqueBox and see both
          applications deployed.

        <screen><prompt>$</prompt> <command>torquebox run</command>
...
19:25:38,049 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rails_example-knob.yml"
19:25:38,050 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed "rack_example-knob.yml"</screen>

          Visit <ulink url="http://localhost:8080"/> and <ulink
          url="http://localhost:8080/rack/"/> to see that both your
          Rails and Rack applications are deployed and working.
        </para>

        <para>
          Congratulations! You now know all the basics to proceed with
          the rest of this getting started guide when using RVM. The
          most important thing to remember is to add the
          <filename>torquebox.rb</filename> that sets the
          <varname>GEM_HOME</varname> and <varname>GEM_PATH</varname>
          environment variables for each application that uses a
          project-specific gemset.
        </para>

        <para>Continue to <xref linkend="adding-torquebox-features"/>.</para>
      </section>
    </section>

    <section id="first-steps-full-distro">
      <title>First Steps with the Full Distribution</title>

      <section>
        <title>Your First Rails Application</title>

        <para>
          Ensure you have Java 6 or above installed then download and
          extract JBoss Enterprise Application Platform 6.1 (EAP 6.1), the
          TorqueBox EAP overlay distribution, and set a few
          environment variables. The example below uses JBoss EAP
          6.1.0.Alpha since it can be easily downloaded from the
          command line. If you'd like to use EAP 6.1.0 Final download
          it from <ulink
          url="http://www.jboss.org/jbossas/downloads"/> instead of
          the wget command below.

           <screen><prompt>$</prompt> <command>wget http://download.jboss.org/jbosseap/6/jboss-eap-6.1.0.Alpha/jboss-eap-6.1.0.Alpha.zip</command>
<prompt>$</prompt> <command>wget http://torquebox.org/release/org/torquebox/torquebox-dist/${project.version}/torquebox-dist-${project.version}-eap-overlay.zip</command>
<prompt>$</prompt> <command>unzip jboss-eap-6.1.0.Alpha.zip -d ~</command>
<prompt>$</prompt> <command>unzip torquebox-dist-${project.version}-eap-overlay.zip -d ~/jboss-eap-6.1</command>
<prompt>$</prompt> <command>export JBOSS_HOME=~/jboss-eap-6.1</command>
<prompt>$</prompt> <command>export JRUBY_HOME=$JBOSS_HOME/jruby</command>
<prompt>$</prompt> <command>export PATH=$JRUBY_HOME/bin:$PATH</command></screen>

          You'll likely want to place the exports somewhere that gets
          loaded automatically - <filename>~/.bashrc</filename>,
          <filename>~/.bash_profile</filename>, or wherever your
          operating system suggests placing user-specific environment
          variables.
        </para>

        <para>
          Install Rails and create a new Rails example application.

          <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rails_example</command>
<prompt>$</prompt> <command>gem install rails</command>
...
Successfully installed rails-4.0.4
26 gems installed
<prompt>$</prompt> <command>rails new .</command>
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.</screen>
        </para>

        <para>
          Add a simple scaffolded resource, deploy it to TorqueBox,
          and run TorqueBox.

          <screen><prompt>$</prompt> <command>rails g scaffold post title body:text</command>
...
      create      app/assets/stylesheets/posts.css.scss
      invoke  scss
      create      app/assets/stylesheets/scaffolds.css.scss
<prompt>$</prompt> <command>rake db:migrate</command>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0060s
==  CreatePosts: migrated (0.0080s) ===========================================

<prompt>$</prompt> <command>torquebox deploy</command>
Deployed: rails_example-knob.yml
    into: /Users/someone/jboss-eap-6.1/standalone/deployments
<prompt>$</prompt> <command>torquebox run </command>
...
15:48:38,426 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 43) JBAS018559: Deployed "rails_example-knob.yml" (runtime-name : "rails_example-knob.yml")</screen>
          <note>
            <title>Rails 4 and ActiveRecord-JDBC</title>
            <para>
              At the time of this writing, Rails 4 requires a
              prerelease version of the activerecord-jdbc gems. If you
              get an error when running migrations, try editing your
              <filename>Gemfile</filename> and change the version of
              activerecord-jdbcsqlite3-adapter to
              '1.3.0.beta2'. Afterwards run <command>bundle
              install</command> and try the migrations again.
            </para>
          </note>
        </para>

        <para>
          Open <ulink url="http://localhost:8080"/> in your browser
          and you'll be greeted with the Rails "Welcome aboard"
          page. Navigate to <ulink
          url="http://localhost:8080/posts/"/> to see your scaffolded
          resource.
        </para>

        <para>
          Now edit
          <filename>~/torquebox_examples/rails_example/app/views/posts/index.html.erb</filename>
          then refresh the posts page in your browser and see your
          changes. Changes to your Rails application show up
          immediately in the browser, as expected. When you're done,
          press CTRL+C in the terminal to stop TorqueBox before
          continuing with the next steps.
        </para>
      </section>

      <section>
        <title>Subsequent Applications</title>

        <para>
          Deploying multiple applications to TorqueBox is
          straightforward, but let's walk through the required steps.
          We'll create a Rack application to go with our Rails example
          application created earlier. If TorqueBox is still running
          stop it with CTRL+C in its terminal window before following
          the steps below.

      <screen><prompt>$</prompt> <command>mkdir -p ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>cd ~/torquebox_examples/rack_example</command>
<prompt>$</prompt> <command>gem install rack</command>
Fetching: rack-1.5.2.gem (100%)
Successfully installed rack-1.5.2
1 gem installed
</screen>

          Now create a <filename>config.ru</filename> for our example
          rack application.
          <example>
            <title><filename>~/torquebox_examples/rack_example/config.ru</filename></title>
            <programlisting>app = lambda { |env|
  [200, { 'Content-Type' => 'text/html' }, "Hello from Rack\n" ]
}
run app</programlisting>
          </example>

          Deploy the Rack application at a context-path of "/rack"
          since we already have the Rails application deployed at the
          root context.

        <screen><prompt>$</prompt> <command>torquebox deploy --context-path=/rack</command>
Deployed: rack_example-knob.yml
    into: /Users/someone/jboss-eap-6.1/standalone/deployments</screen>
        </para>

        <para>
          Now you should be able to run TorqueBox and see both
          applications deployed.

        <screen><prompt>$</prompt> <command>torquebox run</command>
...
22:37:35,963 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 43) JBAS018559: Deployed "rails_example-knob.yml" (runtime-name : "rails_example-knob.yml")
22:37:35,964 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 43) JBAS018559: Deployed "rack_example-knob.yml" (runtime-name : "rack_example-knob.yml")</screen>

          Visit <ulink url="http://localhost:8080"/> and <ulink
          url="http://localhost:8080/rack/"/> to see that both your
          Rails and Rack applications are deployed and working.
        </para>

        <para>
          Congratulations! You now know all the basics to proceed with
          the rest of this getting started guide when using a Mac or
          Linux.
        </para>

        <para>Continue to <xref linkend="adding-torquebox-features"/>.</para>
      </section>
    </section>

   </chapter>
